[{"id":"bc567916c4dc0d8169bd26d18e348d36","title":"test","content":"aaa\n","slug":"test","date":"2022-10-06T10:26:15.000Z","categories_index":"","tags_index":"","author_index":"Aurora"},{"id":"b9663f58f18133b35bfe243f3e916a80","title":"Hello World","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new \"My New Post\"\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","slug":"hello-world","date":"2022-10-06T10:13:28.658Z","categories_index":"","tags_index":"","author_index":"Aurora"},{"id":"45b05c0adc7d6b51711d3e13e977b9ba","title":"hexo","content":"介绍hexo是一个基于nodejs的静态博客网站生成器，作者是来自台湾的Tommy Chen，为许多技术博客的博主所青睐，主要有如下的一些优点：\n\n支持Markdown语法，编辑简单，排版优美；\n\n能够快速生成静态html文件；\n\n部署容易，接口简单； 兼容于各大主流操作系统；\n\n社区主题、插件很多，遇到问题的时候能查到的参考材料也很多。\n\n\nHexo官方文档：https://hexo.io/zh-cn/docs/\nGitee Pages：https://gitee.com/help/articles/4136#article-header0\n环境配置搭建hexo首先需要有nodejs的环境，可以从官网直接下载。\n\n生成博客安装有了npm包管理软件，安装hexo就很方便了，只需要一行命令：\nnpm install node # homebrew安装nodejs\n\n其中-g参数表示全局安装，没有这个参数就只在当前目录下安装，建议全局安装。\n初始化运行命令：\ninstall node # homebrew安装nodejs \n\nINFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.git\nINFO  Install dependencies\n# 一些可能的中间信息\nINFO  Start blogging with Hexo!\n\n然后进入博客目录：\n\n\n\n\n\n\n\n\n\n cd “博客目录”\n安装博客需要的其他支持：\n npm install # 安装的依赖项在package.json文件的dependencies字段中可以看到\n\n博客项目目录结构介绍查看目录结构：\n tree -L 1 \n\n结果如下：\n\n\n\n\n\n\n\n\n\n.├── _config.landscape.yml├── _config.yml├── node_modules├── package-lock.json├── package.json├── scaffolds├── source└── themes\n各部分的含义：\n\n`_config.yml &#96;\n为全局配置文件，网站的很多信息都在这里配置，比如说网站名称，副标题，描述，作者，语言，主题等等。具体可以参考官方文档：https://hexo.io/zh-cn/docs/configuration.html。\n\n\n_scaffolds\n骨架文件，是生成新页面或者新博客的模版。可以根据需求编辑，当hexo生成新博客的时候，会用这里面的模版进行初始化。\n\n\n_source\n这个文件夹下面存放的是网站的markdown源文件，里面有一个_post文件夹，所有的.md博客文件都会存放在这个文件夹下。现在，你应该能看到里面有一个hello-world.md文件。_\n\n\n_themes\n网站主题目录，hexo有非常丰富的主题支持，主题目录会存放在这个目录下面。\n我们后续会以默认主题来演示，更多的主题参见：https://hexo.io/themes/\n\n\n\n生成新文章hexo new post \"test\" # 会在 source/_posts/ 目录下生成文件 ‘test.md’，打开编辑\nhexo generate        # 生成静态HTML文件到 /public 文件夹中\nhexo server          # 本地运行server服务预览，打开 http://localhost:4000 即可预览你的博客\n\n本地预览效果：\n\n\n这是hexo的默认主题，更多的主题可以从官网下载。\n更详细的hexo命令可以查看文档：https://hexo.io/zh-cn/docs/commands\nHexo配置并部署\n\n\n\n\n\n\n\n\n提前对要提交的仓库配置ssh\n1.安装部署工具npm install hexo-deployer-git --save\n\n2.配置部署信息站点配置文件_config.yml\ndeploy:\n  type: git\n  repo: &lt;repository url> # 输入你的仓库地址\n  branch: [branch] # 输入分支\n  token:   #token\n\n\n\n\n\n\n\n\n\n\ndeploy:\n type: git\n repo: &#x67;&#x69;&#x74;&#x40;&#103;&#x69;&#x74;&#101;&#x65;&#x2e;&#x63;&#111;&#109;:cysheng&#x2F;cysheng.git # 输入你的仓库地址\n branch: master # 输入分支\n3.部署hexo clean  \nhexo g  \nhexo d \n\n\nhexo clean\n清除缓存文件 (db.json) 和已生成的静态文件 (public)。\n\nhexo g\nhexo解析站点文件夹，生成一个public文件夹（只包含浏览器可以解析的html、css、js），也就是我们需要部署的文件夹。\n\nhexo d\n部署，即将我们的public文件夹推送到我们配置的仓库\n\n\n4.开启Gitee Pages服务找到新创建的仓库-&gt;【服务】-&gt;【Gitee Pages】  \n如图，选择部署分支，部署目录\n\n部署分支，与本地hexo配置一致\n\n部署目录，不填即整个仓库\n\n强制使用https\n一个是进行加密，还有一个是我在用next主题时使用http访问会有跨域问题导致图标显示不出来\n\n点击启动\n\n访问给出的网站地址（以我的为例：https://cysheng.gitee.io）\n\n\nhexo 框架常用的指令：\n\n\n指令\n说明\n\n\n\nhexo clean &amp;&amp; hexo g\n清除本地项目并重新生成 （重新部署时使用）\n\n\nhexo g\n重新生成\n\n\nHexo s\n开启本地预览\n\n\nHexo d\n推送到github\n\n\n常用功能设置目录&#x3D;&#x3D;toc 插件是：添加生成文章目录的一个插件&#x3D;&#x3D;\n一、安装(这里是hexo的路径下，也就是博客根目录下)\nnpm install hexo-toc --save\n\n二、配置博客根目录下的_config.yml文件：\ntoc:  \n  maxdepth: 3 \n\n\n\n在最后的空白处添加\n三、在markdown里使用\n在Markdown中需要显示文章目录的地方添加\n&lt;!-- toc -->\n\n然后就会将他&#x3D;&#x3D;后面&#x3D;&#x3D;的内容按照标题级别分层\n问题1、图片无法显示typroa设置\n打开typora，选择：偏好设置 - 图像 - 插入图片时，做如下更改：\n\n\n\n\n\n\n\n\n\n复制到指定路径\n.&#x2F;${filename}\n当插入图片时，会生成一个和文件名相同的文件夹，并将图片存入这个文件夹内。\nHexo 设置\n\n安装 hexo-renderer-marked\n\nnpm install hexo-renderer-marked --save\n\n\n之后更改 _config.yml 配置\n\npost_asset_folder: true \n\n安装插件hexo-image-link \nnpm install hexo-image-link --save\n\n此时，在typora 文件中正常显示的图片，在hexo发布后依旧能正常显示。\nNOTE：\n\n如果想用插件 Hexo-renderer-markdown-it （推荐）代替 Hexo-renderer-marked \n\nnpm uninstall hexo-renderer-marker --save  #卸载 marked \n\nnpm install hexo-renderer-markdown-it --save  #安装markdown-it\n\n\n路径转换的解释\n\n假设：文件名: .&#x2F;test.md\n图片路径: .&#x2F;test&#x2F;image.jpg\n当插入图片 image.jpg 到 test.md 中时，typora 的引用路径为\n &#123;% asset_img image.jpg  %&#125; \n\nHexo 发布后的引用路径为\n![](image.jpg) \n\n因此，typora的md文件引入hexo时，应转换路径。即删掉图片路径中的 “test&#x2F;“部分；（此时md文件已不能正常显示图片，而 hexo server 可正常显示）\n插件hexo-image-link帮助实现了这种路径转换。\n安装后，typora 文件中正常显示的图片，在hexo发布后依旧能正常显示。\n","slug":"hexo","date":"2022-10-06T06:53:52.000Z","categories_index":"基础使用","tags_index":"环境搭建,博客","author_index":"Aurora"},{"id":"7c1674297f7521f59190539d304e598a","title":"jQuery对表单的操作及更多应用","content":"","slug":"test001","date":"2022-01-07T14:53:43.000Z","categories_index":"web前端,web前端2","tags_index":"a1,a2","author_index":"Aurora"}]