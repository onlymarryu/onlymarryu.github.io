{"title":"设计模式","uid":"deffdaaa2a24a19ee257667b3b36743c","slug":"DesignMode","date":"2022-10-07T15:52:00.000Z","updated":"2022-10-07T15:52:42.759Z","comments":true,"path":"api/articles/DesignMode.json","keywords":"java","cover":[],"content":"<h1 id=\"谈谈你对设计模式的理解\"><a class=\"markdownIt-Anchor\" href=\"#谈谈你对设计模式的理解\">#</a> 谈谈你对设计模式的理解</h1>\n<p>1. 首先谈设计模式的作用：经验的传承，提高了软件复用的水平，最终达到提高软件开发效率</p>\n<p><strong>五大原则</strong></p>\n<table>\n<thead>\n<tr>\n<th>设计原则</th>\n<th style=\"text-align:left\">简单说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>单一职责</td>\n<td style=\"text-align:left\">一个类只负责一项职责</td>\n</tr>\n<tr>\n<td>里氏替换原则</td>\n<td style=\"text-align:left\">子类可以扩展父类的功能，但不能改变父类原有的功能</td>\n</tr>\n<tr>\n<td>依赖倒置原则</td>\n<td style=\"text-align:left\">要依赖于抽象，不要依赖于具体，核心思想是<strong>面向接口编程</strong></td>\n</tr>\n<tr>\n<td>接口隔离原则</td>\n<td style=\"text-align:left\">建立单一接口，不要建立庞大臃肿的接口，尽量细化接口，接口中的方法尽量少</td>\n</tr>\n<tr>\n<td>迪米特法则 （最少知道原则）</td>\n<td style=\"text-align:left\">一个对象应该对其他对象保持最少的了解</td>\n</tr>\n<tr>\n<td>开闭原则</td>\n<td style=\"text-align:left\">对扩展开放，对修改关闭</td>\n</tr>\n</tbody>\n</table>\n<p>2. 设计模式的分类</p>\n<p><img src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1462/1648123011000/2014caaf469649d1a3c84a582ef7319b.png\" alt=\"image.png\"></p>\n<p>3. 创建型模式：都是用来帮助我们创建对象的！</p>\n<p><img src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1462/1648123011000/c6b87746e9884c22b56ca99bc265c496.png\" alt=\"image.png\"></p>\n<p>4. 结构性模式：关注对象和类的组织</p>\n<p><img src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1462/1648123011000/6b8dffa88b924af6ba3664386d6a9f0a.png\" alt=\"image.png\"></p>\n<p>5. 行为型模式：关注系统中对象之间的相互交换，研究系统在运行时对象之间的相互通信和协作，进一步明确对象的职责，共有 11 中模式</p>\n<p><img src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1462/1648123011000/9bfe35ab4a494cc4ae84a20ee9e30a5c.png\" alt=\"image.png\"></p>\n<h1 id=\"一-创建型模式\"><a class=\"markdownIt-Anchor\" href=\"#一-创建型模式\">#</a> 一、创建型模式</h1>\n<h2 id=\"1单例模式\"><a class=\"markdownIt-Anchor\" href=\"#1单例模式\">#</a> 1. 单例模式</h2>\n<p>作用：单例模式的核心是<strong>保证一个类只有一个实例，并且提供一个访问实例的全局访问点。</strong></p>\n<table>\n<thead>\n<tr>\n<th>实现方式</th>\n<th style=\"text-align:left\">优缺点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>饿汉式</td>\n<td style=\"text-align:left\">线程安全，调用效率高 ，但是不能延迟加载</td>\n</tr>\n<tr>\n<td>懒汉式</td>\n<td style=\"text-align:left\">线程安全，调用效率不高，能延迟加载</td>\n</tr>\n<tr>\n<td>双重检测锁式</td>\n<td style=\"text-align:left\">在懒汉式的基础上解决并发问题</td>\n</tr>\n<tr>\n<td>静态内部类式</td>\n<td style=\"text-align:left\">线程安全，资源利用率高，可以延时加载</td>\n</tr>\n<tr>\n<td>枚举单例</td>\n<td style=\"text-align:left\">线程安全，调用效率高，但是不能延迟加载</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"饿汉式\"><a class=\"markdownIt-Anchor\" href=\"#饿汉式\">#</a> 饿汉式</h3>\n<p>也就是类加载的时候立即实例化对象，实现的步骤是先私有化构造方法，对外提供唯一的静态入口方法，实现如下</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 单例模式：饿汉式\n *\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SingletonInstance1</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 声明此类型的变量，并实例化，当该类被加载的时候就完成了实例化并保存在了内存中</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SingletonInstance1</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SingletonInstance1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 私有化所有的构造方法,防止直接通过new关键字实例化</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">SingletonInstance1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 对外提供一个获取实例的静态方法</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SingletonInstance1</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>饿汉式单例模式代码中，static 变量会在类装载时初始化，此时也不会涉及多个线程对象访问该对象的问题。虚拟机保证只会装载一次该类，肯定不会发生并发访问的问题。因此，可以省略 synchronized 关键字</p>\n<p>问题：如果只是加载本类，而不是要调用 getInstance ()，甚至永远没有调用，则会造成资源浪费！</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 单例模式：饿汉式\n *\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SingletonInstance1</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> b1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token operator\">*</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> b2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token operator\">*</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> b3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token operator\">*</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 声明此类型的变量，并实例化，当该类被加载的时候就完成了实例化并保存在了内存中</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SingletonInstance1</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SingletonInstance1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 私有化所有的构造方法,防止直接通过new关键字实例化</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">SingletonInstance1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 对外提供一个获取实例的静态方法</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SingletonInstance1</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"懒汉式\"><a class=\"markdownIt-Anchor\" href=\"#懒汉式\">#</a> 懒汉式</h3>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 单例模式：懒汉式\n *\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SingletonInstance2</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 声明此类型的变量,但没有实例化</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SingletonInstance2</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 私有化所有的构造方法,防止直接通过new关键字实例化</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">SingletonInstance2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 对外提供一个获取实例的静态方法，为了数据安全添加synchronized关键字</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">synchronized</span> <span class=\"token class-name\">SingletonInstance2</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>instance <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// 当instance不为空的时候才实例化</span>\n\t\t\tinstance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SingletonInstance2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>  此种方式在类加载后如果我们一直没有调用 getInstance 方法，那么就不会实例化对象。实现了延迟加载，但是因为在方法上添加了 synchronized 关键字，每次调用 getInstance 方法都会同步，所以对性能的影响比较大。</p>\n<h3 id=\"双重检测锁\"><a class=\"markdownIt-Anchor\" href=\"#双重检测锁\">#</a> 双重检测锁</h3>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 单例模式：懒汉式\n * 双重检测机制\n *\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SingletonInstance3</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 声明此类型的变量,但没有实例化</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">volatile</span>  <span class=\"token class-name\">SingletonInstance3</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 私有化所有的构造方法,防止直接通过new关键字实例化</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">SingletonInstance3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 对外提供一个获取实例的静态方法，</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span>  <span class=\"token class-name\">SingletonInstance3</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>instance <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SingletonInstance3</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>instance <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token comment\">// 1.分配内存空间  2. 执行构造方法，实例化对象 3.把这个对象赋值给这个空间</span>\n                    <span class=\"token comment\">// 如果不加volatile 会执行重排序 1 3 2 </span>\n\t\t\t\t\tinstance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SingletonInstance3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>不加 volatile 有指令重排序的问题。添加后可以解决。</p>\n<h3 id=\"静态内部类\"><a class=\"markdownIt-Anchor\" href=\"#静态内部类\">#</a> 静态内部类</h3>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 静态内部类实现方式\n *\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SingletonInstance4</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 静态内部类</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SingletonClassInstance</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 声明外部类型的静态常量</span>\n\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">SingletonInstance4</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SingletonInstance4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 私有化构造方法</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">SingletonInstance4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// 对外提供的唯一获取实例的方法</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SingletonInstance4</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">SingletonClassInstance</span><span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"枚举单例\"><a class=\"markdownIt-Anchor\" href=\"#枚举单例\">#</a> 枚举单例</h3>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 单例模式：枚举方式实现\n *\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">SingletonInstance5</span> <span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token comment\">// 定义一个枚举元素，则这个元素就代表了SingletonInstance5的实例</span>\n\t<span class=\"token constant\">INSTANCE</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">singletonOperation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 功能处理</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"2怎么解决反射爆破单例\"><a class=\"markdownIt-Anchor\" href=\"#2怎么解决反射爆破单例\">#</a> 2. 怎么解决反射爆破单例</h2>\n<p>  在单例中我们定义的私有的构造器，但是我们知道反射是可以操作私有的属性和方法的，这时我们应该怎么处理？</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IllegalAccessException</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token class-name\">SingletonInstance1</span> s1 <span class=\"token operator\">=</span> <span class=\"token class-name\">SingletonInstance1</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 反射方式获取实例</span>\n\t<span class=\"token class-name\">Class</span> c1 <span class=\"token operator\">=</span> <span class=\"token class-name\">SingletonInstance1</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">Constructor</span> constructor <span class=\"token operator\">=</span> c1<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredConstructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tconstructor<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">SingletonInstance1</span> s2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SingletonInstance1</span><span class=\"token punctuation\">)</span>constructor<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>输出结果</p>\n<pre class=\"line-numbers language-txt\" data-language=\"txt\"><code class=\"language-txt\">com.dpb.single.SingletonInstance1@15db9742\ncom.dpb.single.SingletonInstance1@6d06d69c\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>产生了两个对象，和单例的设计初衷违背了。<br>\n解决的方式是在无参构造方法中手动抛出异常控制，或者声明一个全局变量来控制。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 私有化所有的构造方法,防止直接通过new关键字实例化</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">SingletonInstance2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>instance <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 只能有一个实例存在，如果再次调用该构造方法就抛出异常，防止反射方式实例化</span>\n\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"单例模式只能创建一个对象\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上面这种方式我们还可以通过反序列化的方式来破解</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IllegalAccessException</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token class-name\">SingletonInstance2</span> s1 <span class=\"token operator\">=</span> <span class=\"token class-name\">SingletonInstance2</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 将实例对象序列化到文件中</span>\n\t<span class=\"token class-name\">ObjectOutputStream</span> oos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span>\n\t\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c:/tools/a.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\toos<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\toos<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\toos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 将实例从文件中反序列化出来</span>\n\t<span class=\"token class-name\">ObjectInputStream</span> ois <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">(</span>\n\t\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c:/tools/a.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">SingletonInstance2</span> s2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SingletonInstance2</span><span class=\"token punctuation\">)</span> ois<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tois<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们只需要在单例类中重写 readResolve 方法并在该方法中返回单例对象即可，如下:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>dpb<span class=\"token punctuation\">.</span>single</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ObjectStreamException</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Serializable</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * 单例模式：懒汉式\n *\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SingletonInstance2</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span><span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token comment\">// 声明此类型的变量,但没有实例化</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SingletonInstance2</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 私有化所有的构造方法,防止直接通过new关键字实例化</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">SingletonInstance2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>instance <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// 只能有一个实例存在，如果再次调用该构造方法就抛出异常，防止反射方式实例化</span>\n\t\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"单例模式只能创建一个对象\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 对外提供一个获取实例的静态方法，为了数据安全添加synchronized关键字</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">synchronized</span> <span class=\"token class-name\">SingletonInstance2</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>instance <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// 当instance不为空的时候才实例化</span>\n\t\t\tinstance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SingletonInstance2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 重写该方法，防止序列化和反序列化获取实例</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">readResolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ObjectStreamException</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>说明:readResolve 方法是基于回调的，反序列化时，如果定义了 readResolve () 则直接返回此方法指定的对象，而不需要在创建新的对象！</p>\n<h2 id=\"3说说你在哪些框架中看到了单例的设计\"><a class=\"markdownIt-Anchor\" href=\"#3说说你在哪些框架中看到了单例的设计\">#</a> 3. 说说你在哪些框架中看到了单例的设计</h2>\n<p>1.Spring 中的 Bean 对象，默认是单例模式</p>\n<p>2. 相关的工厂对象都是单例，比如：MyBatis 中的 SqlSessionFactory，Spring 中的 BeanFactory</p>\n<p>3. 保存相关配置信息的都是单例，比如：MyBatis 中的 Configuration 对象，SpringBoot 中的各个 XXXAutoConfiguration 对象等</p>\n<p>4. 应用程序的日志应用，一般都会通过单例来实现</p>\n<p>5. 数据库连接池的设计也是单例模式</p>\n<h2 id=\"4工厂模式\"><a class=\"markdownIt-Anchor\" href=\"#4工厂模式\">#</a> 4. 工厂模式</h2>\n<p>  工厂模式的作用是帮助我们创建对象，我们不用自己来创建，根据需要创建的对象的复杂度我们可以把工厂模式分为简单工厂，工厂方法和抽象工厂。</p>\n<p><img src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1462/1648123011000/95f501de57d3451faf9228414dc6f75f.png\" alt=\"image.png\"></p>\n<h3 id=\"41-简单工厂\"><a class=\"markdownIt-Anchor\" href=\"#41-简单工厂\">#</a> 4.1 简单工厂</h3>\n<p>  简单工厂模式又称为静态工厂方法，他可以根据不同的参数而返回不同的实例，简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。</p>\n<p>JDK 中的简单工厂应用：DataFormat</p>\n<p><img src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1462/1648123011000/4fdddcfbf8784080a3706158f6945e9a.png\" alt=\"image.png\"></p>\n<p>自己写一个简单工厂的案例</p>\n<p><img src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1462/1648123011000/de2237eb14fe491fbd38c5a815fa7c27.png\" alt=\"image.png\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 简单工厂\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SimpleFactory</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 根据对应的类型返回相关产品</span>\n        <span class=\"token class-name\">CarFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">createCar</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"奥迪\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">CarFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">createCar</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Byd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 定义公共的接口</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Audi</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"奥迪在跑...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Byd</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Byd在跑...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 创建对应的简单工厂类</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CarFactory</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Car</span> <span class=\"token function\">createCar</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"奥迪\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Audi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Byd\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Byd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"该产品不能生产\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们可以发现简单工厂对于新增产品是无能为力的！不修改原有代码根本就没办法扩展！！！</p>\n<h3 id=\"42-工厂方法\"><a class=\"markdownIt-Anchor\" href=\"#42-工厂方法\">#</a> 4.2 工厂方法</h3>\n<p>  针对于简单工厂的短板，引出了工厂方法模式，定义一个用户创建对象的接口，让子类决定实例化哪个类，工厂方法使一个类的实例化延迟到了其子类中。</p>\n<p><img src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1462/1648123011000/cedbded5fc4543eb80dd3663bbe814c7.png\" alt=\"image.png\"></p>\n<p>代码实现：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 工厂方法模式\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FactoryMethod</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">AudiCarFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">createCar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">BydCarFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">createCar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">interface</span>  <span class=\"token class-name\">Car</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Byd</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"比亚迪...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Audi</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"奥迪...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">CarFactory</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Car</span> <span class=\"token function\">createCar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 扩展的工厂</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AudiCarFactory</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">CarFactory</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Car</span> <span class=\"token function\">createCar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Audi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BydCarFactory</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">CarFactory</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Car</span> <span class=\"token function\">createCar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Byd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>简单工厂和工厂方法模式的对比</p>\n<ol>\n<li>简单工厂只有一个工厂，而工厂方法有多个工厂</li>\n<li>简单工厂不支持扩展，而工厂方法支持扩展，扩展的方式就是添加对应的工厂类即可</li>\n<li>简单工厂代码复杂度低，工厂方法代码复杂度高</li>\n<li>…</li>\n</ol>\n<h3 id=\"43-抽象工厂\"><a class=\"markdownIt-Anchor\" href=\"#43-抽象工厂\">#</a> 4.3 抽象工厂</h3>\n<p>  上面的两种方式实现的工厂都是生产同一大类的产品，如果要实现生产不同类型的产品这时我们就可以用抽象工厂模式来实现。</p>\n<p><img src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1462/1648123011000/185ba2bc37394c47ae8f62390d019829.png\" alt=\"image.png\"></p>\n<p>代码实现：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 抽象工厂：多个产品族\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AbstractFactory</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Car</span> car <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LuxuryEngineCarFacory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">createCar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Engine</span> engine <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LuxuryEngineCarFacory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">createEngine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        car<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        engine<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 抽象工厂</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">AbstarctComponentFactory</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Car</span> <span class=\"token function\">createCar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Engine</span> <span class=\"token function\">createEngine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LuxuryEngineCarFacory</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AbstarctComponentFactory</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Engine</span> <span class=\"token function\">createEngine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LuxuryEngineFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">createEngine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Car</span> <span class=\"token function\">createCar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BydCarFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">createCar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LowEngineCarFacory</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AbstarctComponentFactory</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Car</span> <span class=\"token function\">createCar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AudiCarFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">createCar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Engine</span> <span class=\"token function\">createEngine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LowEngineFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">createEngine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 汽车产品族</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">interface</span>  <span class=\"token class-name\">Car</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Byd</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Car</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"比亚迪...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Audi</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Car</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"奥迪...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">CarFactory</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Car</span> <span class=\"token function\">createCar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 扩展的工厂</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AudiCarFactory</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">CarFactory</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Car</span> <span class=\"token function\">createCar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Audi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BydCarFactory</span> <span class=\"token keyword\">implements</span>  <span class=\"token class-name\">CarFactory</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Car</span> <span class=\"token function\">createCar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Byd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 发动机产品族</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Engine</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LuxuryEngine</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Engine</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"豪华版发动机...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LowEngine</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Engine</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"低配版发动机...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">EngineFactory</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Engine</span> <span class=\"token function\">createEngine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LuxuryEngineFactory</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">EngineFactory</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Engine</span> <span class=\"token function\">createEngine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LuxuryEngine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LowEngineFactory</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">EngineFactory</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Engine</span> <span class=\"token function\">createEngine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LowEngine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>三者的对比：</p>\n<ol>\n<li>简单工厂模式 (静态工厂模式) ：虽然某种程度不符合设计原则，但实际使用最多。</li>\n<li>工厂方法模式：不修改已有类的前提下，通过增加新的工厂类实现扩展。</li>\n<li>抽象工厂模式：不可以增加产品，可以增加产品族！</li>\n</ol>\n<h2 id=\"5建造者模式\"><a class=\"markdownIt-Anchor\" href=\"#5建造者模式\">#</a> 5. 建造者模式</h2>\n<p>  实际开发中，我们所需要的对象构建时非常复杂，且有很多步骤需要处理时，这时建造者模式就很适合。比如 MyBatis 中的 SqlSessionFactory 对象的创建，我们不光要创建 SqlSessionFactory 本身的对象，还有完成 MyBatis 的全局配置文件和映射文件的加载解析操作，之后把解析出来的信息绑定在 SqlSessionFactory 对象中，</p>\n<p><img src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1462/1648123011000/21221aa599f9428083bc92d81ac151d2.png\" alt=\"image.png\"></p>\n<p>直接参考 MyBatis 的代码即可</p>\n<p><img src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1462/1648123011000/6d7aec1477204d9397cf5b59a1f2ad65.png\" alt=\"image.png\"></p>\n<p>所以建造者模式的作用就是帮助我们解决了复杂对象的创建</p>\n<p>建造者模式和工厂模式的区别：</p>\n<ul>\n<li>关注的维度是不一样的</li>\n<li>工厂模式创建对象 new 出来</li>\n<li>建造者模式关注的是对象创建的本身</li>\n</ul>\n<h2 id=\"6原型模式\"><a class=\"markdownIt-Anchor\" href=\"#6原型模式\">#</a> 6. 原型模式</h2>\n<p>  在 java 中我们知道通过 new 关键字创建的对象是非常繁琐的 (类加载判断，内存分配，初始化等)，在我们需要大量对象的情况下，原型模式就是我们可以考虑实现的方式。<br>\n  原型模式我们也称为克隆模式，即一个某个对象为原型克隆出来一个一模一样的对象，该对象的属性和原型对象一模一样。而且对于原型对象没有任何影响。原型模式的克隆方式有两种：浅克隆和深度克隆.</p>\n<table>\n<thead>\n<tr>\n<th>原型模式</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>浅克隆</td>\n<td style=\"text-align:left\">只是拷贝本对象，其对象内部的数组、引用对象等都不拷贝，`` 还是指向原生对象的内部元素地址</td>\n</tr>\n<tr>\n<td>深度克隆</td>\n<td style=\"text-align:left\">深复制把要复制的对象所引用的对象都复制了一遍</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"61-浅克隆\"><a class=\"markdownIt-Anchor\" href=\"#61-浅克隆\">#</a> 6.1 浅克隆</h3>\n<p>  被复制对象的所有变量都含有与原来的对象相同的值，而所有的对其他对象的引用仍然指向原来的对象。换言之，浅复制仅仅复制所考虑的对象，而不复制它所引用的对象。 Object 类提供的方法 clone = 只是拷贝本对象 = ， = 其对象内部的数组、引用对象等都不拷贝 = ，还是指向原生对象的内部元素地址.</p>\n<p>  被克隆的对象必须 Cloneable,Serializable 这两个接口；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>bobo<span class=\"token punctuation\">.</span>prototype</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Serializable</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Date</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Cloneable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Date</span> birth<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * 实现克隆的方法\n     * @return\n     * @throws CloneNotSupportedException\n     */</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">CloneNotSupportedException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Date</span> <span class=\"token function\">getBirth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> birth<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setBirth</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Date</span> birth<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>birth <span class=\"token operator\">=</span> birth<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 创建一个普通对象</span>\n        <span class=\"token class-name\">Date</span> date <span class=\"token operator\">=</span>  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">666666</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        user<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"波波烤鸭\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        user<span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        user<span class=\"token punctuation\">.</span><span class=\"token function\">setBirth</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"原型对象的属性：\"</span> <span class=\"token operator\">+</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 克隆对象</span>\n        <span class=\"token class-name\">User</span> cloneUser <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">)</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"克隆的对象的属性：\"</span> <span class=\"token operator\">+</span> cloneUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 修改原型对象的属性</span>\n        date<span class=\"token punctuation\">.</span><span class=\"token function\">setTime</span><span class=\"token punctuation\">(</span><span class=\"token number\">12345677</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 修改克隆对象的属性</span>\n        cloneUser<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"波哥\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"原型对象的属性：\"</span> <span class=\"token operator\">+</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"克隆的对象的属性：\"</span> <span class=\"token operator\">+</span> cloneUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"User&#123;\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"name='\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\", birth=\"</span> <span class=\"token operator\">+</span> birth <span class=\"token operator\">+</span>\n                <span class=\"token string\">\", age=\"</span> <span class=\"token operator\">+</span> age <span class=\"token operator\">+</span>\n                <span class=\"token char\">'&#125;'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>输出结果</p>\n<p><img src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1462/1648123011000/6443e2d851514225a9253ca8d26de73f.png\" alt=\"image.png\"></p>\n<p>浅克隆的问题：虽然产生了两个完全不同的对象，但是被复制的对象的所有变量都含有与原来的对象相同的值，而所有的对其他对象的引用都仍然指向原来的对象。<img src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1462/1648123011000/05ad80babac04b43956010b8244cd85b.png\" alt=\"image.png\"></p>\n<h3 id=\"62-深度克隆\"><a class=\"markdownIt-Anchor\" href=\"#62-深度克隆\">#</a> 6.2 深度克隆</h3>\n<p>  被复制对象的所有变量都含有与原来的对象相同的值，除去那些引用其他对象的变量。那些引用其他对象的变量将指向被复制过的新对象，而不再是原有的那些被引用的对象。换言之，深复制把要复制的对象所引用的对象都复制了一遍。<br>\n实现的效果是:</p>\n<p><img src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1462/1648123011000/6fdf967a6fc74e8690b75e3bb3640b7c.png\" alt=\"image.png\"></p>\n<p>深度克隆 (deep clone) 有两种实现方式，第一种是在浅克隆的基础上实现，第二种是通过序列化和反序列化实现，我们分别来介绍</p>\n<p>方式一：在浅克隆的基础上实现</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 实现克隆的方法\n * @return\n * @throws CloneNotSupportedException\n */</span>\n<span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">protected</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">CloneNotSupportedException</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 实现深度克隆</span>\n    user<span class=\"token punctuation\">.</span>birth <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Date</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>birth<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1462/1648123011000/1ba148deb0244a4dbfef33a8f1b3bcbd.png\" alt=\"image.png\"></p>\n<p>方式二：序列化和反序列化</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>序列化</td>\n<td style=\"text-align:left\">把对象转换为字节序列的过程。</td>\n</tr>\n<tr>\n<td>反序列化</td>\n<td style=\"text-align:left\">把字节序列恢复为对象的过程。</td>\n</tr>\n</tbody>\n</table>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">CloneNotSupportedException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token class-name\">Date</span> date <span class=\"token operator\">=</span>  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">1231231231231l</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tuser<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"波波烤鸭\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tuser<span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tuser<span class=\"token punctuation\">.</span><span class=\"token function\">setBirth</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-----原型对象的属性------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//使用序列化和反序列化实现深复制</span>\n\t<span class=\"token class-name\">ByteArrayOutputStream</span> bos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ByteArrayOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">ObjectOutputStream</span>    oos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span>bos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\toos<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> bos<span class=\"token punctuation\">.</span><span class=\"token function\">toByteArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token class-name\">ByteArrayInputStream</span>  bis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ByteArrayInputStream</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">ObjectInputStream</span>\t  ois <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">(</span>bis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//克隆好的对象！</span>\n\t<span class=\"token class-name\">User</span> user1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">)</span> ois<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n\n\t<span class=\"token comment\">// 修改原型对象的值</span>\n\tdate<span class=\"token punctuation\">.</span><span class=\"token function\">setTime</span><span class=\"token punctuation\">(</span><span class=\"token number\">221321321321321l</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getBirth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------克隆对象的属性-------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>user1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"7谈谈你对创建型模式的理解\"><a class=\"markdownIt-Anchor\" href=\"#7谈谈你对创建型模式的理解\">#</a> 7. 谈谈你对创建型模式的理解</h2>\n<p>  Java 的 23 种设计模式分为 3 类，分别是</p>\n<p><img src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/e7bfebaff043483eae41837038342d60.png\" alt=\"image.png\"></p>\n<p>而创建型模式中有包含的如下的相关模式：</p>\n<p><img src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/370c67f33136431c8c3b4ab9f9e46445.png\" alt=\"image.png\"></p>\n<p>而每个设计模式的作用如下：</p>\n<p><img src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/19e2c33ad56e4b2cb22b3447fcf0e6a5.png\" alt=\"image.png\"></p>\n<h1 id=\"二-结构性模式\"><a class=\"markdownIt-Anchor\" href=\"#二-结构性模式\">#</a> 二、结构性模式</h1>\n<h2 id=\"1代理模式\"><a class=\"markdownIt-Anchor\" href=\"#1代理模式\">#</a> 1. 代理模式</h2>\n<h3 id=\"11-代理模式的作用\"><a class=\"markdownIt-Anchor\" href=\"#11-代理模式的作用\">#</a> 1.1 代理模式的作用</h3>\n<p>  代理模式的作用是通过代理对象来增强目标对象的功能。利用的是 AOP 横切的思想。</p>\n<h3 id=\"12-代理模式的实现方式\"><a class=\"markdownIt-Anchor\" href=\"#12-代理模式的实现方式\">#</a> 1.2 代理模式的实现方式</h3>\n<p>  代理模式的实现方式有三种：静态代理，动态代理 (JDK 动态代理和 CGLIB 动态代理)</p>\n<p><img src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/ff3031b921b948338282ee57ee510c84.png\" alt=\"image.png\"></p>\n<h4 id=\"121-静态代理\"><a class=\"markdownIt-Anchor\" href=\"#121-静态代理\">#</a> 1.2.1 静态代理</h4>\n<p>我们先声明接口和目标实现类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 定义公共接口\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">SomeService</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> <span class=\"token function\">doSome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>目标类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 目标对象 target\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SomeServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">SomeService</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">doSome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"目标对象：doSome()\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"hello ...\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>然后创建对应的代理类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 代理类\n *     增强实现类\n *     和实现类实现同一个接口\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SomeProxy</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">SomeService</span><span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">SomeService</span> target<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SomeProxy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SomeService</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>target <span class=\"token operator\">=</span> target<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * 增强的方法\n     * @return\n     */</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">doSome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"目标方法执行之前...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span><span class=\"token function\">doSome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"目标方法执行之后...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>然后测试实现</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainTest</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">SomeService</span> some <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SomeServiceImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">SomeProxy</span> proxy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SomeProxy</span><span class=\"token punctuation\">(</span>some<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>proxy<span class=\"token punctuation\">.</span><span class=\"token function\">doSome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>对应的输出结果</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">目标方法执行之前<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n目标对象：<span class=\"token function\">doSome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n目标方法执行之后<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">HELLO</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>可以看到代理对象实现了目标对象的调用，同时增强了目标对象的功能。</p>\n<h4 id=\"122-jdk动态代理\"><a class=\"markdownIt-Anchor\" href=\"#122-jdk动态代理\">#</a> 1.2.2 JDK 动态代理</h4>\n<p>  上面的静态代理我们需要手动的创建一个对应的代理来实现，不是太灵活，针对目标对象有实现相关接口的情况，我们可以使用 JDK 动态代理。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JdkDynamicProxy</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token comment\">/**\n     * JDK动态代理：目标对象必须实现相关的接口\n     * @param args\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">SomeService</span> target <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SomeServiceImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">SomeService</span> proxy <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SomeService</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">.</span><span class=\"token function\">newProxyInstance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JdkDynamicProxy</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 类加载器</span>\n                target<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInterfaces</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 目标对象实现的相关接口</span>\n                <span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvocationHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 代理对象的回调方法</span>\n                    <span class=\"token annotation punctuation\">@Override</span>\n                    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> proxy<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Method</span> method<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"before...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token class-name\">Object</span> invoke <span class=\"token operator\">=</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"end...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>invoke <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                            <span class=\"token keyword\">return</span> invoke<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">&#125;</span>\n                        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 通过代理对象来执行</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"proxy.doSome() = \"</span> <span class=\"token operator\">+</span> proxy<span class=\"token punctuation\">.</span><span class=\"token function\">doSome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>输出结构</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">before...\n目标对象：doSome()\nend...\nproxy.doSome() &#x3D; HELLO ...<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"123-cglib动态代理\"><a class=\"markdownIt-Anchor\" href=\"#123-cglib动态代理\">#</a> 1.2.3 CGLIB 动态代理</h4>\n<p>  如果目标对象实现了对应的接口我们可以通过 JDK 动态代理的方式来实现，但如果目标对象没有实现任何的接口，这时我们只能通过 CGLIB 动态代理来实现了，这时我们需要单独引入 cglib 的依赖</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CGLIBDynamicProxy</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token comment\">/**\n     * CGLIB动态代理\n     * @param args\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">SomeService</span> target <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SomeServiceImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">SomeServiceImpl</span> proxy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MethodInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n            <span class=\"token comment\">/**\n             * 创建 CGLIB 代理对象的方法\n             * @return\n             */</span>\n            <span class=\"token keyword\">public</span> <span class=\"token class-name\">SomeServiceImpl</span> <span class=\"token function\">createProxy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// 创建增强器</span>\n                <span class=\"token class-name\">Enhancer</span> e <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Enhancer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 指定父类</span>\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">setSuperclass</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 指定回调接口对象</span>\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">setCallback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 创建CGLIB代理对象</span>\n                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SomeServiceImpl</span><span class=\"token punctuation\">)</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token comment\">/**\n             * 拦截回调的方法\n             */</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">intercept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Method</span> method<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> objects<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MethodProxy</span> methodProxy<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cglib -- befor\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">Object</span> res <span class=\"token operator\">=</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cglib -- end\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token function\">createProxy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"proxy.doSome() = \"</span> <span class=\"token operator\">+</span> proxy<span class=\"token punctuation\">.</span><span class=\"token function\">doSome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>输出的结果</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cglib -- befor\n目标对象：doSome()\ncglib -- end\nproxy.doSome() &#x3D; HELLO ...<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"2适配器模式\"><a class=\"markdownIt-Anchor\" href=\"#2适配器模式\">#</a> 2. 适配器模式</h2>\n<h3 id=\"21-适配器的作用\"><a class=\"markdownIt-Anchor\" href=\"#21-适配器的作用\">#</a> 2.1 适配器的作用</h3>\n<p>  适配器模式的作用是把两个不兼容的对象通过适配器能够连接起来工作。</p>\n<p><img src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/4f1b8160dfaf4de6816c2d7bc7c79ed3.png\" alt=\"image.png\"></p>\n<h3 id=\"22-具体案例分析\"><a class=\"markdownIt-Anchor\" href=\"#22-具体案例分析\">#</a> 2.2 具体案例分析</h3>\n<p>  以 MyBatis 中的日志模块为例来介绍。常见的日志框架有 log4j,log4j2,slf4j,logbak 等，但是每种日志框架中的日志级别都有差异。</p>\n<p>log4j2 的接口：</p>\n<p><img src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/97882ce34e7c45b38a242335fee35136.png\" alt=\"image.png\"></p>\n<p>slf4j 的接口</p>\n<p><img src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/2e0b96e4f72b4d4cb1da9ef190e06f7e.png\" alt=\"image.png\"></p>\n<p>也就是可以看到不同的日志框架里面所定义的日志级别和对应的方法都有区别，那么我们的框架怎么来统一使用这些日志框架呢？在 MyBatis 中通过定义了一个日志接口，定义了日志具有的级别和方法。</p>\n<p><img src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/13b885d6a2e742c8902a41cca65a77f3.png\" alt=\"image.png\"></p>\n<p>那这时候我们就发现具体的日志框架和这个接口其实是没有办法直接来使用的。</p>\n<p><img src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/5394d7aab0b9407bb44e7a43b5a46c35.png\" alt=\"image.png\"></p>\n<p>这时我们就需要通过对应的适配器来处理这种情况，以 Slf4J 为例。</p>\n<p><img src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/cc1a1999be144995bbdfd0d52af15aa1.png\" alt=\"image.png\"></p>\n<h2 id=\"3装饰者模式\"><a class=\"markdownIt-Anchor\" href=\"#3装饰者模式\">#</a> 3. 装饰者模式</h2>\n<h3 id=\"31-装饰者模式的作用\"><a class=\"markdownIt-Anchor\" href=\"#31-装饰者模式的作用\">#</a> 3.1 装饰者模式的作用</h3>\n<p>  装饰者模式又称为包装模式 (<a href=\"https://so.csdn.net/so/search?q=Wrapper&amp;spm=1001.2101.3001.7020\">Wrapper</a>), 作用是用来动态的为一个对象增加新的功能。装饰模式是一种用于代替继承的技术， 无须通过继承增加子类就能扩展对象的新功能 。使用对象的关联关系代替继承关系，更加灵活，同时避免类型体系的快速膨胀。</p>\n<p><img src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/3d6542b45adc4fc1954b5a32e0cefe0b.png\" alt=\"image.png\"></p>\n<h3 id=\"32-装饰者模式的应用\"><a class=\"markdownIt-Anchor\" href=\"#32-装饰者模式的应用\">#</a> 3.2 装饰者模式的应用</h3>\n<p>  装饰者模式的应用场景还是非常多的，比如</p>\n<ul>\n<li>IO 流中的 FileInputStream，FileOutputStream 等</li>\n<li>Spring 中的各种 Wrapper</li>\n<li>MyBatis 中的缓存设计</li>\n</ul>\n<p>我们以 MyBatis 中的缓存实例为例来看看其具体的实现。</p>\n<p>首先是 Cache 接口</p>\n<p><img src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/4fd123c411d44b9b9be4b6fc042cd1a0.png\" alt=\"image.png\"></p>\n<p>然后是 PerpetualCache 实现：仅仅实现了数据基于内存的读写操作。功能单一。</p>\n<p><img src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/64a1d022065f46d5ad8f05fa0a884130.png\" alt=\"image.png\"></p>\n<p>装饰类：然后在 MyBatis 中给我们提供了很多的装饰类。</p>\n<p><img src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/b6a6d87b24bb40d08c86267957622a18.png\" alt=\"image.png\"></p>\n<p>每个装饰类都有自己的作用</p>\n<ul>\n<li>BlockingCache：阻塞的</li>\n<li>LruCache: 根据 Lru 规则来淘汰缓存数据</li>\n<li>FifoCache：根据 FIFO 规则来淘汰缓存数据</li>\n<li>…</li>\n</ul>\n<p>源码中的装饰：</p>\n<p><img src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/15cfb22ba61c4fc9a3c0ee7db595d8b7.png\" alt=\"image.png\"></p>\n<p><img src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/7379277ae49d422cbfe571f0852af446.png\" alt=\"image.png\"></p>\n<table>\n<thead>\n<tr>\n<th>比较</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>优点</td>\n<td style=\"text-align:left\">1. 扩展对象功能，比继承灵活，不会导致类个数急剧增加 &lt;br /&gt;2. 可以对一个对象进行多次装饰，创造出不同行为的组合，得到功能更加强大的对象 &lt; br /&gt;3. 具体构建类和具体装饰类可以独立变化，&lt;br /&gt; 用户可以根据需要自己增加新的具体构件子类和具体装饰子类。</td>\n</tr>\n<tr>\n<td>缺点</td>\n<td style=\"text-align:left\">1.  产生很多小对象。大量小对象占据内存，一定程度上影响性能。&lt;br /&gt;2. 装饰模式易于出错，调试排查比较麻烦。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"4组合模式\"><a class=\"markdownIt-Anchor\" href=\"#4组合模式\">#</a> 4. 组合模式</h2>\n<h3 id=\"41-组合模式的作用\"><a class=\"markdownIt-Anchor\" href=\"#41-组合模式的作用\">#</a> 4.1 组合模式的作用</h3>\n<p>  其实解决的是对象与对象之间的包含关系。也就是 部分 - 整体 的层次结构。</p>\n<h3 id=\"42-组合模式的应用\"><a class=\"markdownIt-Anchor\" href=\"#42-组合模式的应用\">#</a> 4.2 组合模式的应用</h3>\n<p>  组合模式在配置文件的加载解析中其实会用的相对比较多。以 SpringSecurity 的配置文件为例</p>\n<p><img src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/451caf5510724dbdb8781edc504a3108.png\" alt=\"image.png\"></p>\n<p>上面是具体的定义</p>\n<p><img src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/225305de9e79499b9858fdf0954bee43.png\" alt=\"image.png\"></p>\n<p>应用</p>\n<p><img src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/f27879a6ed534ecda344e3c8033e8b66.png\" alt=\"image.png\"></p>\n<h2 id=\"5门面模式\"><a class=\"markdownIt-Anchor\" href=\"#5门面模式\">#</a> 5. 门面模式</h2>\n<p>  门面模式也称为外观模式，他隐藏了系统的复杂性，并向客户端提供了一个可以访问系统的接口。这种类型的设计模式属于结构性模式。为子系统中的一组接口提供了一个统一的访问接口，这个接口使得子系统更容易被访问或者使用。</p>\n<p><img src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/d7cbb356c586445cbae588a9c6944c48.png\" alt=\"image.png\"></p>\n<p>  具体的例子比如：MyBatis 中的 SqlSession 接口，对外提供了数据库操作的相关功能，具体的实现细节对调用者是隐藏的，这种模式在实际项目和框架中很频繁</p>\n<h2 id=\"6桥接模式\"><a class=\"markdownIt-Anchor\" href=\"#6桥接模式\">#</a> 6. 桥接模式</h2>\n<p>  桥接模式的出现是替代掉多层继承的问题。提高了系统的扩展性。</p>\n<p><img src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/689902586ed3400e808b3cdaf88a93de.png\" alt=\"image.png\"></p>\n<p>具体的应用比如 JDBC 中的 DriverManager 其实有用到桥接模式，不同的数据库厂商对应不同的驱动和连接</p>\n<h2 id=\"7享元模式\"><a class=\"markdownIt-Anchor\" href=\"#7享元模式\">#</a> 7. 享元模式</h2>\n<p>  这个问题相对来说比较冷门，用到的也比较少，主要是针对内存这块的节省处理，如果有很多个完全相同或相似的对象，我们可以通过享元模式，节省内存.</p>\n<p>享元模式以共享的方式高效地支持大量细粒度对象的重用。</p>\n<p>享元对象能做到共享的关键是区分了内部状态和外部状态。<br>\n•  <strong>内部状态</strong> ：可以共享，不会随环境变化而改变<br>\n・<strong>外部状态</strong> ：不可以共享，会随环境变化而改变</p>\n<p>比如以围棋为例:</p>\n<p><img src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/ed27059ad63b4d408568033cd3d18998.png\" alt=\"image.png\"></p>\n<p><img src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/d2cd6a9f545e4f09af78a4e4f3c09677.png\" alt=\"image.png\"></p>\n<h1 id=\"三-行为型模式\"><a class=\"markdownIt-Anchor\" href=\"#三-行为型模式\">#</a> 三、行为型模式</h1>\n<p>  行为型模式关注的是对象之间的通信，也就是描述多个类或者对象之间，通过协作共同完成一个任务。主要涉及的是 <strong>对象</strong> 和 <strong>算法</strong>之间职责的分配。</p>\n<p>行为型模式分为两类：</p>\n<ul>\n<li>类行为模式： 通过继承机制来在类间分派行为。 主要是通过多态来分配父类和子类的职责</li>\n<li>对象行为模式： 通过组合或聚合，在对象间分派行为。通过对象关联等方式来分配类的职责。</li>\n</ul>\n<p><img src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651992608037/44e5adf5c4a2487584f3b072b4a19d8a.png\" alt=\"image.png\"></p>\n<h2 id=\"1解释器模式\"><a class=\"markdownIt-Anchor\" href=\"#1解释器模式\">#</a> 1. 解释器模式</h2>\n<h3 id=\"11-解释器模式的作用\"><a class=\"markdownIt-Anchor\" href=\"#11-解释器模式的作用\">#</a> 1.1 解释器模式的作用</h3>\n<p>  解释器模式在业务开发面是很少接触到的。主要的作用是定义的解释器来解析各种表达式，比如 SQL 语句，SPEL 表达式，权限注解中的表达式 hasAnyRole (‘ROLE_ADMIN’) 等。</p>\n<h3 id=\"12-解释器的应用\"><a class=\"markdownIt-Anchor\" href=\"#12-解释器的应用\">#</a> 1.2 解释器的应用</h3>\n<p>  比较常见的应用比如 Spring 中的针对 SPEL 表达式做的解析处理</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">SpelExpressionParser</span> parser <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SpelExpressionParser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Expression</span> expression <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">.</span><span class=\"token function\">parseExpression</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"500-100*2+60\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Object</span> value <span class=\"token operator\">=</span> expression<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value = \"</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"2模板模式\"><a class=\"markdownIt-Anchor\" href=\"#2模板模式\">#</a> 2. 模板模式</h2>\n<h3 id=\"21-模板模式的作用\"><a class=\"markdownIt-Anchor\" href=\"#21-模板模式的作用\">#</a> 2.1 模板模式的作用</h3>\n<p>  模板模式是一种相对简单的设计模式。作用是在父类中固定程序的执行顺序，具体的实现在子类中实现。比如银行定义每个人去银行开户的流程，</p>\n<ol>\n<li>取号</li>\n<li>填写单子</li>\n<li>等待</li>\n<li>办理业务</li>\n<li>结束</li>\n</ol>\n<p>然后每个人来开户都会走这个流程，只是每个人的具体操作内容会有区别</p>\n<h3 id=\"22-模板模式的应用\"><a class=\"markdownIt-Anchor\" href=\"#22-模板模式的应用\">#</a> 2.2 模板模式的应用</h3>\n<p>  模板模式的应用就比较多如下：</p>\n<ol>\n<li>Servlet 中的 doGet 和 doPost 方法</li>\n<li>Spring 中的 JdbcTemplate</li>\n<li>MyBatis 中的 Executor 处理</li>\n<li>…</li>\n</ol>\n<h2 id=\"3责任链模式\"><a class=\"markdownIt-Anchor\" href=\"#3责任链模式\">#</a> 3. 责任链模式</h2>\n<h3 id=\"31-责任链模式的作用\"><a class=\"markdownIt-Anchor\" href=\"#31-责任链模式的作用\">#</a> 3.1 责任链模式的作用</h3>\n<p>  将能够处理同一类请求的对象连成一条链，所提交的请求沿着链传递，链上的对象逐个判断是否有能力处理该请求，如果能则处理，如果不能则传递给链上的下一个对象处理。</p>\n<p><img src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651992608037/4c895e3c35f0466b8832bfaf6d4aa9f2.png\" alt=\"image.png\"></p>\n<h3 id=\"32-责任链模式的应用\"><a class=\"markdownIt-Anchor\" href=\"#32-责任链模式的应用\">#</a> 3.2 责任链模式的应用</h3>\n<p>  责任链模式的应用场景比较多，对大家来说印象比较深刻的应该是 SpringSecurity 中的处理请求的过滤器链了。</p>\n<p><img src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651992608037/627ec42ef657483289810bcd60d202d4.png\" alt=\"image.png\"></p>\n<p>  可以和面试官具体聊下 SpringSecurity 中的这块设计。当然还有一些其他的也可聊比如：</p>\n<ol>\n<li>Java 中，异常机制就是一种责任链模式。一个 try 可以对应多个 catch，当第一个 catch 不匹配类型，则自动跳到第二个 catch.</li>\n<li>Javascript 语言中，事件的冒泡和捕获机制。Java 语言中，事件的处理采用观察者模式。</li>\n<li>SpringMVC 中，拦截器的调用也是典型的责任链模式</li>\n<li>同样的 Servlet 中的过滤器链同样是责任链模式的实现。</li>\n</ol>\n<h2 id=\"4观察者模式\"><a class=\"markdownIt-Anchor\" href=\"#4观察者模式\">#</a> 4. 观察者模式</h2>\n<h3 id=\"41-观察者模式的作用\"><a class=\"markdownIt-Anchor\" href=\"#41-观察者模式的作用\">#</a> 4.1 观察者模式的作用</h3>\n<p>  建立对象与对象之间的依赖关系，一个对象发生改变时，会自动通知其他对象。这个场景中，发生改变的对象被称为观察目标，被通知的对象称为观察者。一个观察目标可以有多个观察者，而这些观察者之间可以没有联系，可以根据需要增加或删除观察者。</p>\n<p><img src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651992608037/28ad3ed5e28f41a69a490ee02fa0bb25.png\" alt=\"image.png\"></p>\n<h3 id=\"42-观察者模式的应用\"><a class=\"markdownIt-Anchor\" href=\"#42-观察者模式的应用\">#</a> 4.2 观察者模式的应用</h3>\n<p>  观察者模式在 Java 编程中用到最多的可能就是事件模块的处理，可以和面试官详细的聊下 Spring 的事件管理机制或者 SpringBoot 的事件处理机制。我们以 SpringBoot 的事件机制为例来说明</p>\n<p><a href=\"https://blog.csdn.net/qq_38526573/article/details/122143258\">https://blog.csdn.net/qq_38526573/article/details/122143258</a> 单独通过一篇文章来说明事件的本质。</p>\n<h2 id=\"5策略模式\"><a class=\"markdownIt-Anchor\" href=\"#5策略模式\">#</a> 5. 策略模式</h2>\n<h3 id=\"51-策略模式的作用\"><a class=\"markdownIt-Anchor\" href=\"#51-策略模式的作用\">#</a> 5.1 策略模式的作用</h3>\n<p>  策略模式的作用就是我们想要实现某个目的，实现的方式可以有很多种，那么这里的每一种实现方式都可以称为一种策略。比如：</p>\n<p><img src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651992608037/22ad4a07e93c4074ac60ae1c7924452a.png\" alt=\"image.png\"></p>\n<p>  我们可以将每一种交通方式都封装为一个独立的类，这就是一种策略。为了保证策略的一致性，还可以用一个抽象的交通方式类 来 做交通方式的定义。</p>\n<h3 id=\"52-策略模式的应用\"><a class=\"markdownIt-Anchor\" href=\"#52-策略模式的应用\">#</a> 5.2 策略模式的应用</h3>\n<p>  策略模式在实际开发中用到的同样会比较多。</p>\n<ol>\n<li>AOP 中根据不同的策略可以通过 JDK 动态代理或者 CGLIB 代理来创建代理对象</li>\n<li>Spring 框架中的 Resources 接口，资源访问的策略</li>\n<li>Servlet 中的 service 方法，会根据客户端的不同提交方式来调用对应的 doGet 或者 doPost 方法来处理请求</li>\n<li>Shiro 中的多 Realm 认证中，根据我们不同的配置可以使用所有 Realm 认证通过或者其中一个认证通过等</li>\n<li>SpringSecurity 中的 Authentication 对象的存储方式</li>\n<li>…</li>\n</ol>\n<h2 id=\"6迭代器模式\"><a class=\"markdownIt-Anchor\" href=\"#6迭代器模式\">#</a> 6. 迭代器模式</h2>\n<h3 id=\"61-迭代器模式的作用\"><a class=\"markdownIt-Anchor\" href=\"#61-迭代器模式的作用\">#</a> 6.1 迭代器模式的作用</h3>\n<p>场景：访问聚合对象中的各个元素的时候，比如链表的遍历。我们一般是将遍历的方法也放在链表类中。但是如果需要修改遍历方法，就需要修改链表类的代码，违背了开闭原则。</p>\n<p>迭代器模式就是在客户访问和聚合类之间插入一个迭代器，这样就将<strong>聚合对象</strong> 和 <strong>遍历方法</strong>解耦了，并且对外隐藏其实现细节。</p>\n<p><img src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651992608037/8a9095d4fbe04245b476ca16250ab2eb.png\" alt=\"image.png\"></p>\n<h3 id=\"62-迭代器模式的应用\"><a class=\"markdownIt-Anchor\" href=\"#62-迭代器模式的应用\">#</a> 6.2 迭代器模式的应用</h3>\n<ol>\n<li>JDK 中的 List/Set 集合中的迭代器</li>\n<li>…</li>\n</ol>\n<h2 id=\"7中介者模式\"><a class=\"markdownIt-Anchor\" href=\"#7中介者模式\">#</a> 7. 中介者模式</h2>\n<h3 id=\"71-中介则模式的作用\"><a class=\"markdownIt-Anchor\" href=\"#71-中介则模式的作用\">#</a> 7.1 中介则模式的作用</h3>\n<p>  对象之间具有很强的关联性，而且有大量的相互调用，这种情况下，如果一个对象发生了变化，就需要追踪该对象关联的其他对象，并进行相应的处理，这就变得很复杂。而中介者模式，就是用一个中介者对象来封装一系列的对象交互，中介者使各对象不需要显式的相互引用，这就使得系统变得低耦合。比如：</p>\n<p><img src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651992608037/bfe0f0f3fbff44e7ad83bc64c9637758.png\" alt=\"image.png\"></p>\n<p>假如没有总经理。下面三个部门：财务部、市场部、研发部。财务部要发工资，让大家核对公司需要跟市场部和研发部都通气；市场部要接个新项目，需要研发部处理技术、需要财务部出资金。市场部跟各个部门打交道。 虽然只有三个部门，但是关系非常乱。</p>\n<p><img src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651992608037/af819fcb665d4aacacc4af386c9b3f8e.png\" alt=\"image.png\"></p>\n<p>实际上，公司都有总经理。各个部门有什么事情都通报到总经理这里，总经理再通知各个相关部门。</p>\n<h3 id=\"72-中介则模式的应用\"><a class=\"markdownIt-Anchor\" href=\"#72-中介则模式的应用\">#</a> 7.2 中介则模式的应用</h3>\n<ol>\n<li>MVC 模式中的 C，控制器就是一个中介者对象，M 和 V 都和 C 打交道</li>\n<li>代理对象中的 invoke 方法，客户端和目标对象都是通过 invoke 来打交到的。</li>\n<li>…</li>\n</ol>\n<h2 id=\"8状态模式\"><a class=\"markdownIt-Anchor\" href=\"#8状态模式\">#</a> 8. 状态模式</h2>\n<p>场景： 如果一个对象的行为会根据 其某个属性的变化而不同，那这个属性就可以被称为该对象的状态。这样的对象也被称为有状态对象（stateful）。如果这样的对象因为某些事件，其内部状态发生了改变，那么系统的行为也要随之发生变化的话，就可以使用状态模式。</p>\n<h2 id=\"9命令模式\"><a class=\"markdownIt-Anchor\" href=\"#9命令模式\">#</a> 9. 命令模式</h2>\n<p>场景：请求的发送者和接收者之间解耦，让对象之间的调用关系更加灵活。发送者和接收者之间没有直接的引用关系，发送请求的对象只需要知道如何发送，而不必关心如何完成请求。</p>\n<h2 id=\"10备忘录模式\"><a class=\"markdownIt-Anchor\" href=\"#10备忘录模式\">#</a> 10. 备忘录模式</h2>\n<p>场景：记录一个对象的内部状态，当用户后悔时能撤销当前的操作，是数据恢复到它原来的状态。比如我们编程的时候，ctrl+z 就是撤销当前操作，恢复到修改前的状态。又叫快照模式。</p>\n<h2 id=\"11访问者模式\"><a class=\"markdownIt-Anchor\" href=\"#11访问者模式\">#</a> 11. 访问者模式</h2>\n<p>场景：有些集合对象中会有多种不同的元素，每种元素都有不同的访问者 和 处理方式。这种被处理的数据元素相对稳定，但是处理方式比较多样的情况，可以用访问者模式来处理。</p>\n<p>访问者模式将数据结构中的各元素的操作分离出来，封装成独立的类，使其在不改变数据结构的前提下，可以添加作用于这些元素的新操作。为数据结构中的每个元素提供多种访问方式。</p>\n","text":"# 谈谈你对设计模式的理解 1. 首先谈设计模式的作用：经验的传承，提高了软件复用的水平，最终达到提高软件开发效率 五大原则 设计原则 简单说明 单一职责 一个类只负责一项职责 里氏替换原则 子类可以扩展父类的功能，但不能改变父类原有的功能 依赖倒置原则 要依赖于抽象，不要依赖于...","link":"","photos":[],"count_time":{"symbolsCount":"25k","symbolsTime":"23 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":1,"path":"api/categories/设计模式.json"}],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%B0%88%E8%B0%88%E4%BD%A0%E5%AF%B9%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E7%90%86%E8%A7%A3\"><span class=\"toc-text\"> 谈谈你对设计模式的理解</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%80-%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\"> 一、创建型模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\"> 1. 单例模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A5%BF%E6%B1%89%E5%BC%8F\"><span class=\"toc-text\"> 饿汉式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%87%92%E6%B1%89%E5%BC%8F\"><span class=\"toc-text\"> 懒汉式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%8C%E9%87%8D%E6%A3%80%E6%B5%8B%E9%94%81\"><span class=\"toc-text\"> 双重检测锁</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9D%99%E6%80%81%E5%86%85%E9%83%A8%E7%B1%BB\"><span class=\"toc-text\"> 静态内部类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9E%9A%E4%B8%BE%E5%8D%95%E4%BE%8B\"><span class=\"toc-text\"> 枚举单例</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E6%80%8E%E4%B9%88%E8%A7%A3%E5%86%B3%E5%8F%8D%E5%B0%84%E7%88%86%E7%A0%B4%E5%8D%95%E4%BE%8B\"><span class=\"toc-text\"> 2. 怎么解决反射爆破单例</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E8%AF%B4%E8%AF%B4%E4%BD%A0%E5%9C%A8%E5%93%AA%E4%BA%9B%E6%A1%86%E6%9E%B6%E4%B8%AD%E7%9C%8B%E5%88%B0%E4%BA%86%E5%8D%95%E4%BE%8B%E7%9A%84%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\"> 3. 说说你在哪些框架中看到了单例的设计</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\"> 4. 工厂模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#41-%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82\"><span class=\"toc-text\"> 4.1 简单工厂</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#42-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95\"><span class=\"toc-text\"> 4.2 工厂方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#43-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82\"><span class=\"toc-text\"> 4.3 抽象工厂</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\"> 5. 建造者模式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\"> 6. 原型模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#61-%E6%B5%85%E5%85%8B%E9%9A%86\"><span class=\"toc-text\"> 6.1 浅克隆</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#62-%E6%B7%B1%E5%BA%A6%E5%85%8B%E9%9A%86\"><span class=\"toc-text\"> 6.2 深度克隆</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7%E8%B0%88%E8%B0%88%E4%BD%A0%E5%AF%B9%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E7%90%86%E8%A7%A3\"><span class=\"toc-text\"> 7. 谈谈你对创建型模式的理解</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8C-%E7%BB%93%E6%9E%84%E6%80%A7%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\"> 二、结构性模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\"> 1. 代理模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\"> 1.1 代理模式的作用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#12-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\"> 1.2 代理模式的实现方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#121-%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86\"><span class=\"toc-text\"> 1.2.1 静态代理</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#122-jdk%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86\"><span class=\"toc-text\"> 1.2.2 JDK 动态代理</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#123-cglib%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86\"><span class=\"toc-text\"> 1.2.3 CGLIB 动态代理</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\"> 2. 适配器模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#21-%E9%80%82%E9%85%8D%E5%99%A8%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\"> 2.1 适配器的作用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#22-%E5%85%B7%E4%BD%93%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90\"><span class=\"toc-text\"> 2.2 具体案例分析</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\"> 3. 装饰者模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#31-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\"> 3.1 装饰者模式的作用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#32-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%BA%94%E7%94%A8\"><span class=\"toc-text\"> 3.2 装饰者模式的应用</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\"> 4. 组合模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#41-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\"> 4.1 组合模式的作用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#42-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%BA%94%E7%94%A8\"><span class=\"toc-text\"> 4.2 组合模式的应用</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\"> 5. 门面模式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\"> 6. 桥接模式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\"> 7. 享元模式</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%89-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\"> 三、行为型模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\"> 1. 解释器模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11-%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\"> 1.1 解释器模式的作用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#12-%E8%A7%A3%E9%87%8A%E5%99%A8%E7%9A%84%E5%BA%94%E7%94%A8\"><span class=\"toc-text\"> 1.2 解释器的应用</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\"> 2. 模板模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#21-%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\"> 2.1 模板模式的作用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#22-%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%BA%94%E7%94%A8\"><span class=\"toc-text\"> 2.2 模板模式的应用</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\"> 3. 责任链模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#31-%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\"> 3.1 责任链模式的作用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#32-%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%BA%94%E7%94%A8\"><span class=\"toc-text\"> 3.2 责任链模式的应用</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\"> 4. 观察者模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#41-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\"> 4.1 观察者模式的作用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#42-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%BA%94%E7%94%A8\"><span class=\"toc-text\"> 4.2 观察者模式的应用</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\"> 5. 策略模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#51-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\"> 5.1 策略模式的作用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#52-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%BA%94%E7%94%A8\"><span class=\"toc-text\"> 5.2 策略模式的应用</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\"> 6. 迭代器模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#61-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\"> 6.1 迭代器模式的作用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#62-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%BA%94%E7%94%A8\"><span class=\"toc-text\"> 6.2 迭代器模式的应用</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\"> 7. 中介者模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#71-%E4%B8%AD%E4%BB%8B%E5%88%99%E6%A8%A1%E5%BC%8F%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\"> 7.1 中介则模式的作用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#72-%E4%B8%AD%E4%BB%8B%E5%88%99%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%BA%94%E7%94%A8\"><span class=\"toc-text\"> 7.2 中介则模式的应用</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\"> 8. 状态模式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\"> 9. 命令模式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\"> 10. 备忘录模式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#11%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\"> 11. 访问者模式</span></a></li></ol></li></ol>","author":{"name":"雾都","slug":"blog-author","avatar":"https://portrait.gitee.com/uploads/avatars/user/3314/9943015_zjj3366_1635594784.png!avatar100","link":"/","description":"","socials":{"github":"https://github.com/onlymarryu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"MySQL基础","uid":"4a207b7e885fdbcca8129599135e5f2e","slug":"Docsify","date":"2022-10-08T07:10:27.998Z","updated":"2022-10-07T13:28:29.476Z","comments":true,"path":"api/articles/Docsify.json","keywords":"java","cover":[],"text":"# Docsify 搭建 官网：https://docsify.js.org/#/zh-cn/ 前提 要配置好 nodeJs 、 npm # 安装 Docsify 插件 自己创建一个要下载到本地的文件夹，然后在这里直接利用命令下载 推荐全局安装 docsify-cli 工具，可以...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"基础使用","slug":"基础使用","count":2,"path":"api/categories/基础使用.json"}],"tags":[{"name":"博客","slug":"博客","count":2,"path":"api/tags/博客.json"},{"name":"环境搭建","slug":"环境搭建","count":1,"path":"api/tags/环境搭建.json"}],"author":{"name":"雾都","slug":"blog-author","avatar":"https://portrait.gitee.com/uploads/avatars/user/3314/9943015_zjj3366_1635594784.png!avatar100","link":"/","description":"","socials":{"github":"https://github.com/onlymarryu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"FastDFS","uid":"0c9b416069b21ba4788b7e5bb7998df5","slug":"FastDFS","date":"2022-10-06T16:00:00.000Z","updated":"2022-10-07T15:16:33.555Z","comments":true,"path":"api/articles/FastDFS.json","keywords":"java","cover":[],"text":"# 分布式文件存储系统 FastDFS # 一、分布式文件存储 # 1. 分布式文件存储的由来 在我们的项目中有很多需要存储的内容出现，比如图片，视频，文件等等，在早期的时候用户量不大，产生的文件也不是很多，这时我们可以把文件和服务程序放在一个服务器中。 后面随着文件越来越多，服...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"分布式","slug":"分布式","count":5,"path":"api/categories/分布式.json"},{"name":"FastDFS","slug":"分布式/FastDFS","count":1,"path":"api/categories/分布式/FastDFS.json"}],"tags":[{"name":"分布式","slug":"分布式","count":6,"path":"api/tags/分布式.json"},{"name":"FastDFS","slug":"FastDFS","count":1,"path":"api/tags/FastDFS.json"}],"author":{"name":"雾都","slug":"blog-author","avatar":"https://portrait.gitee.com/uploads/avatars/user/3314/9943015_zjj3366_1635594784.png!avatar100","link":"/","description":"","socials":{"github":"https://github.com/onlymarryu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}